basePath: /
definitions:
  Course:
    properties:
      attachmentUrls:
        type: string
      coverUrl:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      isPaid:
        type: boolean
      modules:
        items:
          $ref: '#/definitions/Module'
        type: array
      price:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    required:
    - coverUrl
    - createdAt
    - description
    - id
    - price
    - title
    type: object
  CourseUpdateBody:
    properties:
      description:
        type: string
      id:
        type: string
      price:
        type: integer
      title:
        type: string
    required:
    - id
    type: object
  Module:
    properties:
      content:
        type: string
      courseId:
        type: string
      createdAt:
        type: string
      durationMinutes:
        type: integer
      id:
        type: string
      isCompleted:
        type: boolean
      name:
        type: string
      order:
        type: integer
      updatedAt:
        type: string
    required:
    - content
    - courseId
    - createdAt
    - durationMinutes
    - id
    - name
    - order
    type: object
  ModuleUpdateBody:
    properties:
      content:
        type: string
      durationMinutes:
        type: integer
      id:
        type: string
      name:
        type: string
      order:
        type: integer
    required:
    - id
    type: object
  NewActivity:
    properties:
      courseId:
        type: string
      courseName:
        type: string
      isLast:
        type: boolean
      moduleId:
        type: string
      userEmail:
        type: string
      userFullname:
        type: string
      userId:
        type: string
    required:
    - courseId
    - courseName
    - moduleId
    - userEmail
    - userFullname
    - userId
    type: object
  NewModule:
    properties:
      content:
        type: string
      courseId:
        type: string
      durationMinutes:
        type: integer
      name:
        type: string
      order:
        type: integer
    required:
    - content
    - courseId
    - durationMinutes
    - name
    - order
    type: object
  NewUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
    required:
    - email
    - name
    - password
    - phone
    - role
    type: object
  User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      updatedAt:
        type: string
    required:
    - createdAt
    - email
    - id
    - name
    - phone
    type: object
  UserUpdateBody:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
    required:
    - id
    type: object
  entity.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - UserRole
  handler.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.LoginResponse:
    properties:
      error:
        type: string
      token:
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      passwordConfirmation:
        type: string
      phone:
        type: string
    type: object
  handler.RegisterResponse:
    properties:
      error:
        type: string
      token:
        type: string
    type: object
host: kazusa.kz
info:
  contact:
    email: aln.zh.621@gmail.com
    name: API Support
    url: http://kazusa.kz
  description: This is the KazUSA server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger KazUSA API
  version: "1.0"
paths:
  /activity:
    post:
      consumes:
      - application/json
      description: create activity
      operationId: activity.create
      parameters:
      - description: new activity body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NewActivity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Create activity
  /course:
    delete:
      consumes:
      - application/json
      description: delete course
      operationId: course.delete
      parameters:
      - description: course id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Delete course
    get:
      consumes:
      - application/json
      description: read courses
      operationId: course.read
      parameters:
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: id
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Course'
            type: array
        "404":
          description: Not Found
          schema:
            type: boolean
      summary: Read courses
    post:
      consumes:
      - multipart/form-data
      description: create course
      operationId: course.create
      parameters:
      - description: title
        in: formData
        name: title
        required: true
        type: string
      - description: description
        in: formData
        name: description
        required: true
        type: string
      - description: price
        in: formData
        name: price
        required: true
        type: number
      - description: cover
        in: formData
        name: cover
        required: true
        type: file
      - description: cover
        in: formData
        name: attachments
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Create course
    put:
      consumes:
      - application/json
      description: update course
      operationId: course.update
      parameters:
      - description: update course body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CourseUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Update course
  /login:
    post:
      consumes:
      - application/json
      description: login user
      operationId: login
      parameters:
      - description: login body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.LoginResponse'
      summary: Login a user
  /module:
    delete:
      consumes:
      - application/json
      description: delete module
      operationId: module.delete
      parameters:
      - description: module id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Delete module
    get:
      consumes:
      - application/json
      description: read modules
      operationId: module.read
      parameters:
      - description: id
        in: query
        name: id
        type: string
      - description: course_id
        in: query
        name: course_id
        type: string
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Module'
            type: array
        "404":
          description: Not Found
          schema:
            type: boolean
      summary: Read modules
    post:
      consumes:
      - application/json
      description: update module
      operationId: module.update
      parameters:
      - description: update module body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ModuleUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Update module
  /register:
    post:
      consumes:
      - application/json
      description: register user
      operationId: register
      parameters:
      - description: register body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.RegisterResponse'
      summary: Register a user
  /user:
    delete:
      consumes:
      - application/json
      description: delete user
      operationId: user.delete
      parameters:
      - description: user id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Delete user
    get:
      consumes:
      - application/json
      description: read users
      operationId: user.read
      parameters:
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: id
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        "404":
          description: Not Found
          schema:
            type: boolean
      summary: Read users
    post:
      consumes:
      - application/json
      description: create user
      operationId: user.create
      parameters:
      - description: new user body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NewUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Create user
    put:
      consumes:
      - application/json
      description: update user
      operationId: user.update
      parameters:
      - description: update user body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UserUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Update user
swagger: "2.0"
